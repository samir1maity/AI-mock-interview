// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:0WtTAEx5orCO@ep-proud-mode-a52v9gjw.us-east-2.aws.neon.tech/neondb?sslmode=require"
}

model User {
  id                String             @default(uuid())
  name              String?
  email             String             @id @unique
  image             String?
  emailVerified     DateTime?
  interviewSessions InterviewSession[] // Relation to InterviewSession
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model InterviewSession {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userEmail], references: [email]) // Relation using user email
  userEmail String // Foreign key to User's email

  // Storing job-related data at the time of the interview
  jobRole         String // The job role user is interviewing for during this session
  jobDescription  String? // Job description for this session
  experienceYears Int // Years of experience during this session

  messages         Message[] // Relation to messages in the chat session
  sessionStartedAt DateTime  @default(now())
  sessionEndedAt   DateTime? // Optional, can be set when the interview ends
}

model Message {
  id        Int              @id @default(autoincrement())
  sessionId Int // Foreign key to InterviewSession
  session   InterviewSession @relation(fields: [sessionId], references: [id])
  sender    String // Can be 'user' or 'AI'
  content   String // The actual chat message
  timestamp DateTime         @default(now()) // Timestamp of when the message was sent
  isAi      Boolean
  isUser    Boolean
}
